// Znachi edna aplikacija mora da ima i nekoja arhitektura
// Arhitektura ili struktura i organizacija za nekakov kod

// Zosto?

// Arhitekturata na edna aplikacija igra klucna uloga na razvojot na aplikacija poradi nekolku pricini i toa:

// 1. Организација и структура: Архитектурата обезбедува систематски начин за организирање и структурирање на базата на кодови. Ја дефинира целокупната рамка, интеракциите на компонентите и односите, што го олеснува разбирањето и навигацијата низ кодот. Добро структурираната апликација е поодржлива и им овозможува на повеќе програмери да работат заеднички на различни делови од системот.

// 2.Поделба на сектори: Архитектурите помагаат во раздвојувањето на различните сектори и одговорности во рамките на апликацијата. Ова раздвојување промовира модуларност, што го олеснува управувањето и ажурирањето на одредени компоненти без да влијае на другите. На пример, во архитектурата MVC, моделот се справува со операции поврзани со податоци, приказот се занимава со логиката на презентацијата, а контролорот управува со протокот на апликации. Оваа поделба ја подобрува повторната употреба и одржливоста на кодот.

// 3.Проверливост: Архитектурите го олеснуваат тестирањето на единиците, тестирањето на интеграцијата и целокупната проверливост на апликацијата. Со одвојување на грижите и изолирање на компонентите, станува полесно да се пишуваат независни тестови за секој модул. Ова помага да се идентификуваат грешки или проблеми на почетокот на процесот на развој и осигурува дека промените во една компонента не ненамерно влијаат на другите.

// 4.Одржливост: Добро дизајнираната архитектура ја подобрува одржливоста. Како што се развиваат апликациите, се додаваат нови функции, а барањата се менуваат. Архитектурата која промовира раздвојување на грижи и модуларност го олеснува разбирањето и менувањето на одредени делови од апликацијата без да влијае на целиот систем. Ова го намалува ризикот од воведување грешки и ја подобрува целокупната стабилност и долговечноста на апликацијата.

// 5. Повторна употреба на кодот: Архитектурите поттикнуваат код за повеќекратна употреба. Со структурирање на апликацијата во модуларни компоненти, програмерите можат да креираат библиотеки, модули или приклучоци кои можат повторно да се користат во повеќе проекти. Ова заштедува време и напор за развој, како и промовира конзистентност кај различни апликации.

//* Севкупно, да се има добро дефинирана архитектура обезбедува бројни придобивки за развој на апликации, вклучувајќи организација, одржување, приспособливост, можност за тестирање и повторна употреба на кодот. Тоа им помага на програмерите да изградат робусни и одржливи апликации кои лесно можат да се прилагодат на променливите барања и технолошкиот напредок.

//! Denes kje uchime za MVC arhitektura (Model-View-Controller) e arhitektura koja voobichaeno se koristi vo razvojot na softver. Ovaa arhitektura ima za cel da ni sozdade jasna podelba pomegju komponentite na podatoci(model), logika na prezentacija(view) i logika na aplikacijata (kontroler)

//! MVC
//! M - Model - Vo modelot stoi logikata za podatocite
//! V - View - View e zagrizen za prezentacija na izgledot
//! C - Controller - Kontrolerot e mozokot na nashata stranica, koj vrshi interakcija so modelot i view

//! Моделот ги претставува податоците и неговата поврзана деловна логика. Тој е во интеракција со базата на податоци, се справува со валидација на податоци, врши операции CRUD (Креирај, чита, ажурира, брише)

//! Viewto е одговорен за презентирање на податоците на корисникот. Го опфаќа корисничкиот интерфејс и сите визуелни елементи. Во случајот на Node.js, приказите обично се прикажуваат на страната на серверот користејќи шаблони како што се EJS, Pug (порано Jade) или Handlebars. Овие шаблони ни дозволуваат динамички да генерирате HTML страници со вградување податоци од моделот.

//! Контролорот делува како посредник помеѓу моделот и погледот. Се справува со барањата на корисниците, ги обработува влезните податоци и одлучува кои податоци од моделот треба да се користат за генерирање на одговорот. Ја содржи логиката на апликацијата, како што се ракување со поднесоци на формулари, автентикација и донесување одлуки врз основа на внесување на корисникот. Во Node.js, контролерот може да се имплементира со користење на функции или класи, во зависност од вашите преференции и структурата на проектот.

const express = require("express");
const calculator = require("./controller/calculator");

const app = express();
app.use(express.urlencoded({ extended: true }));
// const bmiCalculator = (req, res) => {
//   const weight = req.params.weight;
//   const height = req.params.height;
//   const bmi = weight / (height * height);
//   res.send(`${bmi}`);
// };

app.get("/bmi/:weight/:height/", calculator.bmiCalculator);
app.get("/newton/:mass/:acc/", calculator.calculateForce);

app.get("/calculator", calculator.getCalculator);
app.post("/calculator", calculator.postCalculator);

app.listen(10000, (err) => {
  if (err) return console.log(err);
  console.log("Server started!");
});
